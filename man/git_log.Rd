% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_git_log.R
\name{git_log}
\alias{git_log}
\title{Print or return a detailed \verb{git log} of the git repository located in the
specified directory.}
\usage{
git_log(path = ".", n_commits = NULL, return_log = FALSE)
}
\arguments{
\item{path}{Character. Path to the directory to check. Defaults to the
current working directory ".". If the path does not exist, the function
will stop and throw an error. If the path is not a git repository, the
function will throw a warning.}

\item{n_commits}{Integer. Number of recent commits to display. If \code{NULL} (the
default), the complete log is shown. If \code{n_commits} is not \code{NULL} or a
positive number, the function will stop and throw an error. This parameter
is ignored if \code{return_log} is \code{TRUE}.}

\item{return_log}{Logical. Whether to return the log (\code{TRUE}) or print it to
the console (\code{FALSE}, default). If \code{TRUE}, the function returns a character
vector containing the log lines.}
}
\value{
If \code{return_log} is \code{TRUE}, returns a character vector containing the
git log lines. If \code{return_log} is \code{FALSE}, the function is called for its
side effect of printing to the console.
}
\description{
This function checks if the specified directory is a Git repository and, if
so, executes a \verb{git log} command to either print the log to the console or
return it. It supports execution on Windows and Linux operating systems and
provides a visually appealing graph format of the log, showing the commit
hash, references, commit message, relative commit date, and author name.
}
\note{
The function will stop and throw an error if the specified path does
not exist, the operating system is not supported, the directory is not a
Git repository, Git is not installed, or if the \code{n_commits} parameter is
not \code{NULL} or a positive number.
}
\examples{
# Show the most recent commit
git_log(n_commits = 1)

# Show the most recent 5 commits
git_log(n_commits = 5)

# Return the log as a character vector
Log <- git_log(return_log = TRUE)

length(Log)

head(Log, 8)

\dontrun{
  # not a git repo
  git_log(path = "C:/")
  # #> Error: The provided path does not exist.
}
}
\author{
Ahmed El-Gabbas
}
