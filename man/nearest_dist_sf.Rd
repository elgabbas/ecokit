% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spat_nearest_dist_sf.R
\name{nearest_dist_sf}
\alias{nearest_dist_sf}
\title{Calculate Nearest Neighbour Distances for Spatial Features}
\usage{
nearest_dist_sf(sf_object, resolution = 0.25, n_cores = 6L)
}
\arguments{
\item{sf_object}{An sf object with CRS \code{EPSG:4326}. Must contain at least 2
features.}

\item{resolution}{Numeric. The resolution for rasterization in degrees.
Default is 0.25. Must be a single positive numeric value. The smaller the
resolution, the more accurate the distance calculations, but also the more
computationally intensive.}

\item{n_cores}{Integer. The number of cores to use for parallel processing.
Default is \code{6L}.}
}
\value{
An sf object identical to the input \code{sf_object} with an additional
column \code{nearest_dist} containing the distance (in kilometres) to the
nearest neighbour for each feature.
}
\description{
This function calculates the nearest neighbour distance for each feature in
an sf object. It rasterizes the input data at a specified resolution,
converts to polygons, and then computes the distance to the nearest neighbour
for each feature. The function can be used to detect spatial outliers before
use in ecological modelling like species distribution models.
}
\details{
The function performs the following steps:
\itemize{
\item Validates that the input is an sf object with CRS \code{EPSG:4326} and
contains at least 2 features
\item Rasterizes the input data at the specified resolution
\item Converts raster cells to polygons
\item Calculates centroids for faster distance computation
\item Computes the distance to the second nearest neighbour (the first is the
feature itself)
\item Joins the calculated distances back to the original sf object
}
}
\examples{
# Create sample sf object
ecokit:::load_packages(sf, dismo, fs, dplyr, tibble)

occurrence <- system.file(package = "dismo") \%>\%
  fs::path("ex", "bradypus.csv") \%>\%
  read.table(header = TRUE, sep = ",") \%>\%
  tibble::tibble() \%>\%
  # add clear outline
  dplyr::bind_rows(
    tibble::tibble(
      species = "Bradypus variegatus", lon = -40.2, lat = 14.1 )) \%>\%
  st_as_sf(crs = 4326L, coords = c("lon", "lat"))
head(occurrence)

plot(occurrence["species"], key.pos = NULL, pch = 20, col = "blue")

# Calculate nearest distances
result <- nearest_dist_sf(occurrence, resolution = 0.25, n_cores = 2)
head(result)

plot(result["nearest_dist"], pch = 20)

}
\author{
Ahmed El-Gabbas
}
