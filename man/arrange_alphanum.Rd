% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_arrange_alphanum.R
\name{arrange_alphanum}
\alias{arrange_alphanum}
\title{Arrange Dataframe Rows Alphanumerically}
\usage{
arrange_alphanum(
  data = NULL,
  ...,
  desc = FALSE,
  na_last = TRUE,
  blank_last = FALSE,
  scientific = TRUE
)
}
\arguments{
\item{data}{A dataframe or tibble to be sorted.}

\item{...}{Unquoted names of the columns to sort by (e.g., v1, v2, etc.)
Sorting is done sequentially based on the order of columns provided.}

\item{desc}{Logical value or vector. If a single \code{TRUE}, sorts all specified
columns in descending alphanumeric order. If a single \code{FALSE} (default),
sorts all in ascending order. If a logical vector, its length must match
the number of columns specified in \code{...}, determining the sort order for
each column respectively (e.g., \code{c(FALSE, TRUE)} for ascending first
column, descending second). \code{NA} values in \code{desc} are treated as \code{FALSE}
(ascending). Columns must be character, numeric, or factor types for
sorting.}

\item{na_last}{for controlling the treatment of \code{NA} values. If \code{TRUE},
missing values in the data are put last; if \code{FALSE}, they are put first; if
\code{NA}, they are removed. See \link[gtools:mixedsort]{gtools::mixedsort} for more details.}

\item{blank_last}{for controlling the treatment of blank values. If \code{TRUE},
blank values in the data are put last; if \code{FALSE}, they are put first; if
\code{NA}, they are removed. See \link[gtools:mixedsort]{gtools::mixedsort} for more details.}

\item{scientific}{logical. Should exponential notation be allowed for numeric
values. See \link[gtools:mixedsort]{gtools::mixedsort} for more details.}
}
\value{
A dataframe sorted according to the specified columns and orders.
}
\description{
Sorts the rows of a dataframe based on one or more columns using alphanumeric
sorting order. Allows for specifying ascending or descending order for each
sorting column individually.
}
\note{
The \code{arrange_alphanum} function sorts dataframe rows alphanumerically,
handling mixed numeric and character strings correctly (e.g., "A1", "A10",
"A2" as "A1", "A2", "A10"), whereas \link[dplyr:arrange]{dplyr::arrange} uses standard
lexicographic sorting, which may order them incorrectly (e.g., "A1", "A10",
"A2").
}
\examples{
# increase the number of printed rows
options(pillar.print_max = 40)
load_packages(dplyr, tidyr, tibble)

# create a sample dataframe
set.seed(100)
(df <- tidyr::expand_grid(
  v1 = c("A1", "A2", "A10", "A010", "A25"),
  v2 = c("P1", "P2"), v3 = c(10, 5, 1, 15)) \%>\%
  dplyr::slice_sample(n = 40))

# sort by v1 (ascending)
# arrange function does not sort alphanumerically
dplyr::arrange(df, v1)

# arrange_alphanum function sorts alphanumerically
arrange_alphanum(df, v1)
# arrange_alphanum(df, v1, desc = FALSE)                    # the same
# arrange_alphanum(df, v1, desc = NA)                       # the same

# sort first by v2 (ascending), then by v1 (ascending)
arrange_alphanum(df, v2, v1)
# arrange_alphanum(df, v2, v1, desc = FALSE)                # the same
# arrange_alphanum(df, v2, v1, desc = c(FALSE, FALSE))      # the same

# sort by v2 (ascending), then v1 (descending)
arrange_alphanum(df, v2, v1, desc = c(FALSE, TRUE))

# sort by v2 (descending), then v1 (ascending)
arrange_alphanum(df, v2, v1, desc = c(TRUE, FALSE))

# sort by v2 (descending), v1 (descending)
arrange_alphanum(df, v2, v1, desc = TRUE)
# arrange_alphanum(df, v2, v1, desc = c(TRUE, TRUE))        # the same

# sort by v2 (descending), v1 (ascending), v3 (descending)
arrange_alphanum(df, v2, v1, v3, desc = c(TRUE, FALSE, TRUE))

# -----------------------------------------------

# Example with NA and blank strings
(df_special <- tibble::tibble(v1 = c("A", "", "B", NA, "C")))

# sort with NA first, blanks first (default)
arrange_alphanum(df_special, v1, na_last = FALSE, blank_last = FALSE)

# sort with NA last, blanks last
arrange_alphanum(df_special, v1, na_last = TRUE, blank_last = TRUE)
}
\author{
Ahmed El-Gabbas
}
