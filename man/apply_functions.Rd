% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_apply.R
\name{apply_functions}
\alias{apply_functions}
\alias{lapply_}
\alias{sapply_}
\title{Apply a function over a list or vector with optional silence}
\usage{
lapply_(X, FUN, Silent = TRUE, ...)

sapply_(X, FUN, simplify = TRUE, Silent = TRUE, ...)
}
\arguments{
\item{X}{a vector (atomic or list) or an \code{\link[base]{expression}}
    object.  Other objects (including classed objects) will be coerced
    by \code{base::\link[base]{as.list}}.}

\item{FUN}{the function to be applied to each element of \code{X}:
    see \sQuote{Details}.  In the case of functions like
    \code{+}, \code{\%*\%}, the function name must be backquoted or quoted.}

\item{Silent}{Logical; if TRUE, the function returns \code{invisible(NULL)}
instead of the actual result, effectively suppressing the output. This
enhances the base \link[base:lapply]{base::sapply} for cases where the return value is not
necessary and its output is undesired.}

\item{...}{Additional arguments to be passed to \code{FUN}.}

\item{simplify}{logical or character string; should the result be
    simplified to a vector, matrix or higher dimensional array if
    possible?  For \code{sapply} it must be named and not abbreviated.
    The default value, \code{TRUE}, returns a vector or matrix if appropriate,
    whereas if \code{simplify = "array"} the result may be an
    \code{\link[base]{array}} of \dQuote{rank}
    (\eqn{=}\code{length(dim(.))}) one higher than the result
    of \code{FUN(X[[i]])}.}
}
\value{
If \code{Silent} is \code{TRUE}, returns \code{NULL} invisibly, otherwise returns a
list of the same length as \code{X}, where each element is the result of
applying \code{FUN} to the corresponding element of \code{X}.
}
\description{
Wrapper functions around the base \link[base:lapply]{base::lapply} and \link[base:lapply]{base::sapply} functions
that allow for the application of a function over a list or vector. It
extends original functions by providing an option to suppress the output,
effectively allowing for operations where the user may not care about the
return value (e.g., plotting). This behaviour is similar to the \link[purrr:map]{purrr::walk}
function.
}
\examples{
par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
lapply(list(x = 100:110, y = 110:120), function(V) {
    plot(V, las = 1, main = "lapply")
})

# -------------------------------------------

par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
lapply_(list(x = 100:110, y = 110:120), function(V) {
    plot(V, las = 1, main = "lapply_")
})

# -------------------------------------------

#' par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
sapply(
    list(x = 100:110, y = 110:120),
    function(V) {
        plot(V, las = 1, main = "sapply")
        })

# -------------------------------------------

# nothing returned or printed, only the plotting
par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
sapply_(
  list(x = 100:110, y = 110:120),
  function(V) {
    plot(V, las = 1, main = "sapply_")
    })
}
\author{
Ahmed El-Gabbas
}
