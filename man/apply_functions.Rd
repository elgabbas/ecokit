% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_apply.R
\name{apply_functions}
\alias{apply_functions}
\alias{lapply_}
\alias{sapply_}
\title{Apply a function over a list or vector with optional silence}
\usage{
lapply_(x, fun, silent = TRUE, ...)

sapply_(x, fun, simplify = TRUE, silent = TRUE, ...)
}
\arguments{
\item{x}{a vector (atomic or list) or an expression object. Other objects
(including classed objects) will be coerced by \link[base:list]{base::as.list}.}

\item{fun}{the function to be applied to each element of x. In the case of
functions like +, \%*\%, the function name must be backquoted or quoted.}

\item{silent}{A logical value. If \code{TRUE}, the function suppresses the return
value of \code{fun} and returns \code{NULL} invisibly. If \code{FALSE}, the function
returns the result of applying \code{fun} over \code{X}.}

\item{...}{Additional arguments to be passed to \code{fun}.}

\item{simplify}{Logical or character string; should the result be simplified
to a vector, matrix or higher dimensional array if possible?}
}
\value{
If \code{silent} is \code{TRUE}, returns \code{NULL} invisibly, otherwise returns a
list of the same length as \code{x}, where each element is the result of
applying \code{fun} to the corresponding element of \code{x}.
}
\description{
Wrapper functions around the base \link[base:lapply]{base::lapply} and \link[base:lapply]{base::sapply} functions
that allow for the application of a function over a list or vector. It
extends original functions by providing an option to suppress the output,
effectively allowing for operations where the user may not care about the
return value (e.g., plotting). This behaviour is similar to the \link[purrr:map]{purrr::walk}
function.
}
\examples{
par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
lapply(list(x = 100:110, y = 110:120), function(V) {
    plot(V, las = 1, main = "lapply")
})

# -------------------------------------------

par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
lapply_(list(x = 100:110, y = 110:120), function(V) {
    plot(V, las = 1, main = "lapply_")
})

# -------------------------------------------

#' par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
sapply(
    list(x = 100:110, y = 110:120),
    function(V) {
        plot(V, las = 1, main = "sapply")
        })

# -------------------------------------------

# nothing returned or printed, only the plotting
par(mfrow = c(1,2), oma = c(0.25, 0.25, 0.25, 0.25), mar = c(3,3,3,1))
sapply_(
  list(x = 100:110, y = 110:120),
  function(V) {
    plot(V, las = 1, main = "sapply_")
    })
}
\author{
Ahmed El-Gabbas
}
