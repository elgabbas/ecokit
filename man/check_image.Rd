% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_check_image.R
\name{check_image}
\alias{check_image}
\title{Verify Image File Integrity}
\usage{
check_image(file, warning = TRUE)
}
\arguments{
\item{file}{A character string specifying the path to the image file.}

\item{warning}{A logical value indicating whether to issue warnings for
invalid files (e.g., empty files, unrecognized extensions). Defaults to
\code{TRUE}.}
}
\value{
A logical value: \code{TRUE} if the file is a valid image or PDF, \code{FALSE}
otherwise.
}
\description{
This function checks the integrity of image files (JPEG, PNG, TIFF, and PDF)
by validating their existence, size, extension, and type using the \code{file}
bash command. It confirms that the file has a recognized image or PDF format
and non-zero dimensions (or page count for PDFs).
}
\details{
The function performs the following checks:
\itemize{
\item Validates that \code{file} is a single character string.
\item Ensures the file exists and is not a directory.
\item Checks that the file size is non-zero, issuing a warning if empty (when
\code{warning = TRUE}).
\item Verifies the file extension is one of \code{jpg}, \code{jpeg}, \code{png}, \code{tif},
\code{tiff}, or \code{pdf}, issuing a warning if not (when \code{warning = TRUE}).
\item Uses the \code{file} bash command to confirm the file type and extract
metadata (e.g., dimensions for images, page count for PDFs). The file is
considered valid if it matches the expected type and has positive
dimensions (or page count). The \code{file} command must be available on the
system.
}
}
\examples{
# Load required packages
ecokit::load_packages(fs)

# Create a temporary directory for test files
temp_dir <- fs::dir_create(fs::path_temp("image_test"))

# --------------------------------------------

# Valid image files

# jpeg
jpeg_path <- fs::path(temp_dir, "valid_image.jpg")
grDevices::jpeg(
  filename = jpeg_path, width = 6, height = 6, units = "cm", res = 200)
plot(1:10, 1:10, main = "Valid Image")
invisible(grDevices::dev.off())
check_image(jpeg_path)

# png
png_path <- fs::path(temp_dir, "valid_image.png")
png(
  filename = png_path, width = 6, height = 6, units = "cm", res = 200)
plot(1:10, 1:10, main = "Valid Image")
invisible(grDevices::dev.off())
check_image(png_path)


# tiff
tiff_path <- fs::path(temp_dir, "valid_image.tiff")
tiff(
  filename = tiff_path, width = 6, height = 6, units = "cm", res = 200)
plot(1:10, 1:10, main = "Valid Image")
invisible(grDevices::dev.off())
check_image(tiff_path)

# pdf
pdf_path <- fs::path(temp_dir, "valid_document.pdf")
grDevices::pdf(file = pdf_path, width = 6, height = 6)
plot(1:10, 1:10, main = "Valid Document")
invisible(grDevices::dev.off())
check_image(pdf_path)

# --------------------------------------------

# Corrupted image file

corrupt_path <- fs::path(temp_dir, "corrupt_image.jpg")
fs::file_create(corrupt_path)
writeBin(charToRaw("This is not an image"), corrupt_path)
check_image(corrupt_path)

corrupt_pdf_path <- fs::path(temp_dir, "valid_document.pdf")
grDevices::pdf(file = corrupt_pdf_path, width = 6, height = 6)
invisible(grDevices::dev.off())
check_image(corrupt_pdf_path)

# --------------------------------------------

# Non-image file

text_path <- fs::path(temp_dir, "not_an_image.txt")
fs::file_create(text_path)
writeLines("This is a text file", text_path)

check_image(text_path)
check_image(text_path, warning = FALSE)

# --------------------------------------------

# Nonexistent file

nonexistent_path <- fs::path(temp_dir, "nonexistent_image.jpg")
check_image(nonexistent_path)

check_image(temp_dir)

# --------------------------------------------

# Clean up
fs::dir_delete(temp_dir)
}
\author{
Ahmed El-Gabbas
}
