% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_set_parallel.R
\name{set_parallel}
\alias{set_parallel}
\title{Set up or stop parallel processing plan}
\usage{
set_parallel(
  n_cores = 1L,
  strategy = "multisession",
  stop_cluster = FALSE,
  show_log = TRUE,
  future_max_size = 500L,
  ...
)
}
\arguments{
\item{n_cores}{Integer. Number of cores to use. If \code{NULL}, defaults to
sequential mode. Default is \code{1}.}

\item{strategy}{Character. The parallel processing strategy to use. Valid
options are \code{sequential}, \code{multisession} (default), \code{multicore} (not
supported on Windows), and \code{cluster}. If \code{strategy} is not one of the valid
options or if \code{multicore} on Windows PC, it defaults to \code{multisession}. See
\code{\link[future:plan]{future::plan()}} for more details.}

\item{stop_cluster}{Logical. If \code{TRUE}, stops any parallel cluster and
resets to sequential mode. If \code{FALSE} (default), sets up a new plan.}

\item{show_log}{Logical. If \code{TRUE} (default), logs messages via
\code{\link[=cat_time]{cat_time()}}.}

\item{future_max_size}{Numeric. Maximum allowed total size (in megabytes) of
global variables identified. See \code{future.globals.maxSize} argument of
\link[future:zzz-future.options]{future::future.options} for more details. Default is \code{500L} for 500 MB.}

\item{...}{Additional arguments to pass to \link{cat_time}.}
}
\description{
Configures parallel processing with \code{\link[future:plan]{future::plan()}} or stops an existing
plan. When stopping, it resets to sequential mode.
}
\examples{
load_packages(future)

# number of workers available
future::nbrOfWorkers()

# ---------------------------------------------
# `future::multisession`
# ---------------------------------------------

# Prepare working in parallel
set_parallel(n_cores = 2)
future::plan("list")
future::nbrOfWorkers()

# Stopping parallel processing
set_parallel(stop_cluster = TRUE)
future::plan("list")
future::nbrOfWorkers()

# ---------------------------------------------
# `future::cluster`
# ---------------------------------------------

# Prepare working in parallel
set_parallel(n_cores = 2, strategy = "cluster")
future::plan("list")
future::nbrOfWorkers()

# Stopping parallel processing
set_parallel(stop_cluster = TRUE)
future::plan("list")
future::nbrOfWorkers()

# ---------------------------------------------
# `future::multicore`
# ---------------------------------------------

# Prepare working in parallel
set_parallel(n_cores = 2, strategy = "multicore")
future::plan("list")
future::nbrOfWorkers()

# Stopping parallel processing
set_parallel(stop_cluster = TRUE)
future::plan("list")
future::nbrOfWorkers()

# ---------------------------------------------
# `future::sequential`
# ---------------------------------------------

set_parallel(n_cores = 1, strategy = "sequential")
future::nbrOfWorkers()
}
\author{
Ahmed El-Gabbas
}
