% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_stop_ctx.R
\name{stop_ctx}
\alias{stop_ctx}
\title{Signal structured errors with metadata, timestamps, and backtraces}
\usage{
stop_ctx(
  message,
  ...,
  class = NULL,
  call = NULL,
  parent = NULL,
  include_backtrace = FALSE,
  cat_timestamp = FALSE,
  cat_date = FALSE
)
}
\arguments{
\item{message}{Character. The primary error message to display.}

\item{...}{Named R objects to include as metadata. These can be of various
types, such as vectors, lists, data frames, tibbles, SpatRaster,
RasterLayer, RasterStack, RasterBrick, sf objects, regression models (e.g.,
lm, glm), ggplot objects, S4 objects, and more. Unnamed arguments will
cause an error due to \code{.named = TRUE} in \code{\link[rlang:enquo]{rlang::enquos()}}. \code{NULL} values
are displayed as "NULL".}

\item{class}{Character or \code{NULL.} Subclass(es) for the error condition.
Defaults to \code{NULL}. See \link[rlang:abort]{rlang::abort} for more details.}

\item{call}{Call or \code{NULL}. The call causing the error. Defaults to the
caller's expression.  See \link[rlang:abort]{rlang::abort} for more details.}

\item{parent}{Condition or \code{NULL}. Parent error for nesting. Defaults to
\code{NULL}. See \link[rlang:abort]{rlang::abort} for more details.}

\item{include_backtrace}{Logical. If \code{TRUE}, includes a compact backtrace.
Default: \code{FALSE}.}

\item{cat_timestamp}{Logical. If \code{TRUE}, prepends a timestamp (HH:MM:SS).
Default: \code{TRUE}.}

\item{cat_date}{Logical. If \code{TRUE}, prepends the date (YYYY-MM-DD). Default:
\code{FALSE}.}
}
\value{
Does not return; throws an error via \code{\link[rlang:abort]{rlang::abort()}}.
}
\description{
Signals errors with rich context, wrapping \code{\link[rlang:abort]{rlang::abort()}}. It includes:
\itemize{
\item The calling function name (if applicable).
\item User-defined metadata (e.g., vectors, lists, data frames, tibbles,
SpatRaster, RasterLayer, RasterStack, RasterBrick, sf objects, regression
models, ggplot objects, S4 objects).
\item Optional timestamps/dates.
\item Optional backtraces to aid debugging.
}
}
\section{Metadata Output}{
 The metadata section in the error message displays
each provided object with its name, the verbatim expression used, its
class, and its value:
\itemize{
\item \strong{Object Name}: The name of the argument (e.g., \code{file}).
\item \strong{Verbatim Expression}: The expression passed (e.g.,
\code{"data.csv"}).
\item \strong{Class}: The class of the object, with multiple classes
concatenated using \code{+} (e.g., \verb{<tbl_df + tbl + data.frame>}).
\item \strong{Value}: The formatted output of the object, using methods
like \code{print()}, \code{summary()}, \code{glimpse()}, or \code{str()}, depending on the
object type.
}
For example:
\preformatted{
  ----- Metadata -----
  file ["data.csv"]: <character>
  "data.csv"

  type ["missing_input"]: <character>
  "missing_input"
  }
Complex objects, such as data frames or raster layers, will display their
structure or summary as appropriate.
}

\examples{
# loading packages
load_packages(dplyr, sf, terra, raster)

# -------------------------------------------------------------------

# Basic error with metadata and backtrace
try(
  stop_ctx(
    message = "File not found", file = "data.csv",
    type = "missing_input", foo = 1:3, include_backtrace = TRUE))

# -------------------------------------------------------------------

# Include date in error message; no backtrace
try(
  stop_ctx(
    message = "File not found", file = "data.csv",
    type = "missing_input", cat_date = TRUE))

# -------------------------------------------------------------------

# Complex objects as metadata
terra_obj <- terra::rast()
raster_obj <- raster::raster()
sf_obj <- sf::st_point(c(0,0))
lm_obj <- lm(mpg ~ wt, data = mtcars)
try(
  stop_ctx(
    message = "File not found", raster = raster_obj, terra = terra_obj,
    data_frame = iris, matrix = as.matrix(iris), sf_obj = sf_obj,
    lm_obj = lm_obj))

# -------------------------------------------------------------------

# S4 object as metadata
setClass("Student", slots = list(name = "character", age = "numeric"))
student <- new("Student", name = "John Doe", age = 23)
try(
  stop_ctx(
    message = "Student record error",
    metadata = student, type = "invalid_data", include_backtrace = FALSE))

# -------------------------------------------------------------------

# Nested function error with backtrace
f3 <- function(x) {
  stop_ctx("Non-numeric input in f3()", input = x, include_backtrace = TRUE)
}
f2 <- function(y) f3(y + 1)
f1 <- function(z) f2(z * 3)

# Output includes: "Calling Function: f1" before metadata
try(f1("not a number"))

# -------------------------------------------------------------------

# Nested function error without metadata
f3 <- function() {
  stop_ctx(message = "Error in f3()", include_backtrace = TRUE)
}
f2 <- function(y) f3()
f1 <- function(z) f2()

# Output includes: "Calling Function: f1" before metadata
try(f1())

# -------------------------------------------------------------------

\dontrun{
  # Unnamed arguments will cause an error
  stop_ctx("A", "X")
}
}
\author{
Ahmed El-Gabbas
}
