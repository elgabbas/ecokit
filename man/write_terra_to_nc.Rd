% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spat_write_terra_to_nc.R
\name{write_terra_to_nc}
\alias{write_terra_to_nc}
\title{Write a SpatRaster to a NetCDF File with Multiple Variables}
\usage{
write_terra_to_nc(
  input_raster = NULL,
  filename = NULL,
  overwrite = FALSE,
  compression_level = 9L,
  missval = -9999L,
  var_units = "unknown"
)
}
\arguments{
\item{input_raster}{A \code{terra::SpatRaster} object with one or more layers. The
names of the layers will be used as the variable names in the \code{NetCDF}
file.}

\item{filename}{Character. The file path for the output NetCDF file. It is
recommended to use a \code{.nc} extension.}

\item{overwrite}{Logical. If \code{TRUE}, an existing file at the specified
\code{filename} will be overwritten. Defaults to \code{FALSE}.}

\item{compression_level}{An integer between 0 (no compression) and 9 (maximum
DEFLATE compression). Defaults to \code{9}.}

\item{missval}{Numeric. Value for missing values in the NetCDF file. Defaults
to \code{-9999}.}

\item{var_units}{A character string or a vector of character strings
specifying the units for each variable. If a single string is provided, it
will be applied to all variables. If a vector, its length must match the
number of layers in \code{input_raster}. Defaults to \code{"unknown"}.}
}
\value{
This function does not return a value. It is called for its side
effect of writing a file to disk.
}
\description{
This function takes a \code{terra::SpatRaster} object and writes it to a NetCDF
file. Each layer of the input raster is saved as a separate, correctly named
variable in the output file. This function uses the \code{ncdf4} package for
robust, low-level control over the NetCDF creation process, ensuring that
layer names, CRS, and other metadata are preserved and compression is applied
correctly.
}
\examples{

require(terra)
require(ncdf4)
require(dismo)

fnames <- list.files(
  path = paste(system.file(package = "dismo"), "/ex", sep = ""),
  pattern = "grd", full.names = TRUE)

predictors <- terra::toMemory(terra::rast(fnames))
names(predictors)

# Define an output file path
output_file <- tempfile(fileext = ".nc")

# Use the function to write the SpatRaster to a NetCDF file
write_terra_to_nc(
  input_raster = predictors,
  filename = output_file,
  overwrite = TRUE,
  compression_level = 7)

# Verify the result
predictors2 <- terra::rast(output_file)
print(identical(names(predictors), names(predictors2)))

difference_raster <- predictors - predictors2
print(terra::minmax(difference_raster))

# Clean up the temporary file
unlink(output_file)
}
\author{
Ahmed El-Gabbas
}
