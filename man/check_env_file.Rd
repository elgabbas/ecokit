% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_check_env_file.R
\name{check_env_file}
\alias{check_env_file}
\title{Check the integrity of a \code{.env} file before loading environment variables}
\usage{
check_env_file(env_file = ".env", warning = TRUE)
}
\arguments{
\item{env_file}{Path to the .env file (default: ".env")}

\item{warning}{Logical; if \code{TRUE}, prints warnings for errors (default:
\code{TRUE})}
}
\value{
Logical: \code{TRUE} if valid, \code{FALSE} otherwise
}
\description{
Validates a \code{.env} file to ensure it is properly formatted for loading
environment variables.
}
\details{
The function performs the following checks:
\itemize{
\item Verifies file exists and is readable
\item Confirms \code{.env} extension
\item Ensures file is not empty
\item Checks for at least one valid variable definition
\item Validates non-comment, non-empty lines follow \code{KEY=VALUE} format (allowing
optional whitespace around KEY, '=', and VALUE)
\item Ensures variable names start with letter/underscore, followed by
letters/digits/underscores
\item Checks for duplicate variable names (case-sensitive)
\item Ignores comment lines (starting with #) and empty lines
\item Validates no unclosed quotes in values
\item Checks for unquoted special characters in values
}
}
\examples{
# Save a valid .env file to temp file
valid_env <- fs::file_temp(ext = ".env")
writeLines(
  c("DB_HOST=localhost", "DB_PORT=5432", "# Comment", "API_KEY='abc123'"),
  valid_env)
check_env_file(valid_env)  # Returns TRUE

# Invalid .env file
invalid_env <- fs::file_temp(ext = ".env")

writeLines(
  c(
   "DB_HOST=localhost", "INVALID KEY=value",
   "DB_HOST=duplicate"),
 invalid_env)
check_env_file(invalid_env)  # Returns FALSE
}
\author{
Ahmed El-Gabbas
}
