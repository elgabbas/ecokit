% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_load_packages_future.R
\name{load_packages_future}
\alias{load_packages_future}
\title{Prepare Packages for Parallel Processing with Future}
\usage{
load_packages_future(packages = character(), strategy = "future::sequential")
}
\arguments{
\item{packages}{Character vector of package names to load, or \code{NULL} to
indicate no packages are needed (returns \code{NULL}).}

\item{strategy}{Character string specifying the \code{future} strategy, one of
\code{"future::sequential"}, \code{"future::multisession"}, \code{"future::multicore"}, or
\code{"future::cluster"}.}
}
\value{
A value depending on \code{strategy}:
\itemize{
\item \code{future::sequential}: \code{NULL} (no workers; packages not loaded).
\item \code{future::multicore} (non-Windows): \code{NULL} (packages loaded in the
main process, inherited by forks).
\item \code{future::multicore} (Windows), \code{future::multisession}, or
\code{future::cluster}: \code{packages} (character vector of package names to load in
workers, e.g., via \code{future.packages}).
\item If \code{packages} is \code{NULL}: \code{NULL} (no packages to load).
}
}
\description{
Prepares a list of packages for use in parallel processing with the \code{future}
package, determining whether to load packages in the main process or pass
them to parallel workers based on the specified \code{future} strategy. This
function is designed to minimize package-loading messages in SLURM
environments, especially for \code{future::multicore}.
}
\details{
This function helps manage package loading for parallel processing
with the \code{future} package. It ensures efficient package handling and
minimizes package-loading messages in SLURM environments, particularly for
\code{future::multicore} on non-Windows systems, where packages are loaded in
the main process to avoid redundant messages in worker forks. For
\code{future::multisession}, \code{future::cluster}, or \code{future::multicore} on
Windows (where \code{multicore} falls back to \code{multisession}), it returns the
package names for loading in workers, typically via the \code{future.packages}
argument in functions like \code{\link[future.apply:future_lapply]{future.apply::future_lapply()}}.
}
\examples{
pkg_init <- loaded_packages()

# future::sequential
load_packages_future("tidyterra", "future::sequential")
setdiff(loaded_packages(), pkg_init)

# future::multisession
load_packages_future("tidyterra", "future::multisession")
setdiff(loaded_packages(), pkg_init)

# future::multicore
load_packages_future("tidyterra", "future::multicore")
setdiff(loaded_packages(), pkg_init)
}
\author{
Ahmed El-Gabbas
}
